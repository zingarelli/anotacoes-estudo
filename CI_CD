# CI/CD e GitHub Actions

Anota√ß√µes bem breves sobre CI/CD e aplica√ß√£o de GitHUb Actions para automatiza√ß√£o com a Vercel. 

Para algo mais detalhado, veja os dois √∫ltimos links listados abaixo.

üéì Curso Alura: [NextJS: CI e CD para Front-end com o Github Actions](https://cursos.alura.com.br/course/nextjs-ci-cd-front-end-github-actions)

üôè [Cr√©ditos da imagem](https://www.blackduck.com/glossary/what-is-cicd.html)

üóíÔ∏è [GitHub Actions Quickstart (em ingl√™s)](https://docs.github.com/en/actions/writing-workflows/quickstart)

üóíÔ∏è [Guia Vercel com GitHub Actions (em ingl√™s)](https://vercel.com/guides/how-can-i-use-github-actions-with-vercel)

## Defini√ß√£o

- CI (Continuous Integration): est√° relacionado √†s etapas de commit, build e testes da aplica√ß√£o, ou seja, **tarefas do dia a dia do dev**. Garante que mudan√ßas no c√≥digo est√£o de acordo para serem incorporadas ao reposit√≥rio;

- CD (Continuous Delivery): est√° relacionado √†s etapas de release e deploy, ou seja, √†s **entregas do projeto**. As entregas s√£o feitas de maneira automatizada para diferentes ambientes, seja produ√ß√£o, staging, etc.

S√£o processos de automatiza√ß√£o de um projeto. O CI acontece enquanto o c√≥digo est√° sendo escrito; o CD acontece ap√≥s o c√≥digo estar "completo".

![SVG ilustrando os passos envolvidos em um processo de CI/CD em um ciclo infinito: planejamento, codifica√ß√£o, build, testes cont√≠nuos, release, deploy, opera√ß√£o, monitoramento.](https://www.blackduck.com/glossary/what-is-cicd/_jcr_content/root/synopsyscontainer/column_1946395452_co/colRight/image_copy.coreimg.svg/1727199377195/cicd.svg)

## GitHub Actions

O GitHub Actions √© uma plataforma criada pelo GitHub para agregar processos de CI/CD ao seu projeto quando hospedado no GitHub.

Voc√™ automatiza seus processos por meio dos chamados "workflows". S√£o arquivos YAML em que voc√™ define o momento em que o workflow √© executado (chamados eventos), as vari√°veis de ambiente a serem utilizadas, as tarefas a serem realizadas (chamados de jobs), podendo tamb√©m utilizar tarefas automatizadas pelo pr√≥prio GitHub (as actions), etc.

Em seu projeto, os workflows devem ser armazenados na pasta: `.github/workflows`.

üóíÔ∏è [Eventos que ativam workflows (em ingl√™s)](https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows)

### Usando GitHub Actions para deploy na Vercel

√â poss√≠vel adicionar tarefas da Vercel ao workflow, personalizando o deploy. Para isso, s√£o necess√°rios alguns passos. O curso mostrou detalhadamente uma forma, mas j√° √© antiga e algumas coisas mudaram. 

Deixo abaixo os links para refer√™ncia (em ingl√™s) de como √© feito hoje em dia, e mais abaixo exemplo de parte de script criado no `package.json` e um arquivo YAML utilizado para o workflow de deploy.

- [Cria√ß√£o do arquivo YAML para o workflow](https://vercel.com/guides/how-can-i-use-github-actions-with-vercel)

- [Cria√ß√£o do VERCEL_TOKEN](https://vercel.com/guides/how-do-i-use-a-vercel-api-access-token)

- [Instala√ß√£o da Vercel CLI](https://vercel.com/docs/cli): necess√°ria para criar os tokens VERCEL_ORG_ID e VERCEL_PROJECT_ID.

  - uma alternativa √© usar o comando `npx vercel link` na pasta do projeto. Quando rodar a primeira vez, dois passos adicionais ir√£o ocorrer: 1. Ir√° instalar o pacote da Vercel e 2. Ir√° logar na sua conta Vercel. Ap√≥s isso, o comando ir√° rodar e fazer algumas perguntas para configura√ß√£o do link (√© como seu projeto local √© linkado com o projeto hospedado na Vercel). Finalizado, ser√° criada a pasta `.vercel` e dentro dela voc√™ encontrar√° o `projectId` e `orgId` no arquivo `project.json`. Essa pasta √© automaticamente adicionada ao gitignore. **N√ÉO compartilhe essa pasta nem os valores dos tokens** para evitar acesso indevido ao seu projeto.

- [Cria√ß√£o de secrets no GitHub](https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions#creating-secrets-for-a-repository): √© aqui que voc√™ vai guardar os tokens gerados, evitando exp√¥-los nos seus arquivos.

#### Scripts package.json

```json
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint",
  "lint:fix": "next lint --fix",
  "deploy:prod": "npm run build && vercel --yes --prod --token=$VERCEL_TOKEN"
}
```

#### Arquivo yml

```yml
# nome para o workflow
name: 'CD: Main Workflow'

# vari√°veis de ambiente 
# (salvas no GitHub Secrets)
env:
  VERCEL_TOKEN: '${{ secrets.VERCEL_TOKEN }}'
  VERCEL_ORG_ID: '${{ secrets.VERCEL_ORG_ID }}'
  VERCEL_PROJECT_ID: '${{ secrets.VERCEL_PROJECT_ID }}'

# workflow acionado em eventos de push
# nas branches main e cd-vercel
on:
  push:
    branches: [main, cd-vercel]

# o que deve ser executado
jobs:
  deploy: # nome deste job
    runs-on: ubuntu-latest # m√°quina virtual
    
    # adicione - para indicar lista de passos
    steps:      
      - uses: actions/checkout@v3

      - name: Run Install
        run: npm install

      # script criado no package.json
      - name: Run Deploy      
        run: npm run deploy:prod
```